{"version":3,"sources":["components/CountdownDisplay.js","redux/constants.js","components/BreakControls.js","redux/actions.js","components/SessionControls.js","components/PlayControls.js","components/TimerModule.js","components/beeoowoop01.mp3","components/beeoowoop01.ogg","components/BeepO.js","App.js","reportWebVitals.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["connect","state","sessionToggle","timeLeft","remainingCountdown","props","padEl","useRef","useEffect","current","className","id","ref","Math","floor","padStart","START","STOP","RESET","INCREMENT_BREAK","DECREMENT_BREAK","INCREMENT_SESSION","DECREMENT_SESSION","TICK","BREAK_TO_SESSION","BreakControls","this","breakDurationMins","value","onClick","breakDownOne","breakUpOne","React","Component","dispatch","type","SessionControls","sessionDurationMins","sessionDownOne","sessionUpOne","countdownRunning","timerReset","timerStart","timerStop","breakToSession","timerTick","useState","interv","setInterv","setInterval","clearInterval","useLayoutEffect","resetCount","beepAudio","play","pause","currentTime","preload","src","beepMp3","beepOgg","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","action","createStore","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f57628ce.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './CountdownDisplay.css'\n\n {/* User Story #8: I can see an element with corresponding id=\"time-left\".\n    NOTE: Paused or running, the value in this field should always be displayed \n    in mm:ss format (i.e. 25:00). */}\n\n  {/* User Story #19: If the timer is running, the element with the id of time-left should display the remaining time in mm:ss format (decrementing by a value of 1 and updating the display every 1000ms). */}\n\nconst CountdownDisplay = (props) => {\n  \n  const padEl = useRef(null);\n\n  useEffect( () => {\n    (!props.sessionToggle)\n    ? padEl.current.className = 'flip'\n    : padEl.current.className = null\n  }, [props.sessionToggle]);\n\n  return (\n    <div id=\"countdown-pad\" ref={padEl}>\n      <h3>Time left:</h3>\n      <h2 id=\"time-left\">\n        { \n          // Got too cute with Date objects\n          // new Date(props.timeLeft * 1000).toISOString().substr(14, 5)\n          \n          //switching to simple maths\n          `${Math.floor(props.timeLeft / 60)}`.padStart(2, '0') + `:` +\n          `${props.timeLeft % 60}`.padStart(2, '0')\n\n        }</h2>\n\n    {/*User Story #7: I can see an element with a corresponding id=\"timer-label\",\n    that contains a string indicating a session is initialized (e.g. \"Session\").*/}\n\n    {/* User Story #22: When a session countdown reaches zero (NOTE: timer MUST \n    reach 00:00), and a new countdown begins, the element with the id of \n    timer-label should display a string indicating a break has begun. */}\n\n\n\n    {/* User Story #24: When a break countdown reaches zero (NOTE: timer MUST \n    reach 00:00), and a new countdown begins, the element with the id of \n    timer-label should display a string indicating a session has begun. */}\n\n\n\n    <div id=\"timer-label\">\n      {(props.sessionToggle)\n        ? `Work It`\n        : `Break It`\n      } \n    </div>\n    \n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sessionToggle: state.sessionToggle,\n    timeLeft: state.remainingCountdown\n  }\n}\n\nexport default connect(mapStateToProps)(CountdownDisplay)","export const START = \"START\";\n\nexport const STOP = \"STOP\";\n\nexport const RESET = \"RESET\";\n\nexport const INCREMENT_BREAK = \"INCREMENT_BREAK\";\n\nexport const DECREMENT_BREAK = \"DECREMENT_BREAK\";\n\nexport const INCREMENT_SESSION = \"INCREMENT_SESSION\";\n\nexport const DECREMENT_SESSION = \"DECREMENT_SESSION\";\n\nexport const TICK = \"TICK\";\n\nexport const SESSION_TO_BREAK = \"SESSION_TO_BREAK\";\n\nexport const BREAK_TO_SESSION = \"BREAK_TO_SESSION\"; ","import React from 'react';\nimport { connect } from 'react-redux';\nimport { breakUp, breakDown } from '../redux/actions'\nimport './BreakControls.css'\n\nclass BreakControls extends React.Component {\nconstructor(props) {\n  super(props);\n}\n\nrender() {\n  return (\n    <div id=\"breakPad\">\n      {/* User Story #1: I can see an element with id=\"break-label\" that contains \n      a string (e.g. \"Break Length\"). */}\n      <header className=\"break-header\">\n        <h2 id=\"break-label\">\n          Break minutes:\n        </h2>\n        <h2 id=\"break-length\">\n          {this.props.breakDurationMins}\n        </h2>\n      </header>\n      {/* User Story #5: I can see an element with a corresponding \n       id=\"break-length\", which by default (on load) displays a value of 5. */}\n\n    \n      {/* User Story #3: I can see two clickable elements with\n      corresponding IDs: id=\"break-decrement\" and id=\"break-increment\".\n      \n      User Story #12: When I click the element with the id of break-decrement,\n      the value within id=\"break-length\" decrements by a value of 1, and I can \n      see the updated value.\n      */}\n      <div id=\"break-decrement\" \n        value=\"break-decrement\"\n        onClick={this.props.breakDownOne}\n        className={`btn`}\n        >\n        <h3>Break DOWN</h3>\n      </div>\n\n      {/* \n      User Story #13: When I click the element with the id of break-increment,\n      the value within id=\"break-length\" increments by a value of 1, and I can\n      see the updated value. */}\n      <div id=\"break-increment\"\n        className={`btn`}\n        value=\"break-increment\"\n      onClick={this.props.breakUpOne}\n      >\n        <h3>Break UP</h3>\n      </div>\n    </div>\n\n  )\n}\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    breakDurationMins: state.breakDurationMins\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    breakUpOne: () => dispatch(breakUp()),\n    breakDownOne: () => dispatch(breakDown()) \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BreakControls);","import { INCREMENT_BREAK, DECREMENT_BREAK, \n  INCREMENT_SESSION, DECREMENT_SESSION, RESET, START, STOP, TICK, BREAK_TO_SESSION } from './constants';\n\nexport const breakUp = () => {\n  return {\n    type: INCREMENT_BREAK\n  }\n}\n\nexport const breakDown = () => {\n  return {\n    type: DECREMENT_BREAK\n  }\n}\n\nexport const sessionUp = () => {\n  return {\n    type: INCREMENT_SESSION\n  }\n}\n\nexport const sessionDown = () => {\n  return {\n    type: DECREMENT_SESSION\n  }\n}\n\nexport const timerReset = () => {\n  return {\n    type: RESET\n  }\n}\n\nexport const timerStart = () => {\n  return {\n    type: START\n  }\n}\n\nexport const timerStop = () => {\n  return {\n    type: STOP\n  }\n}\n\nexport const timerTick = () => {\n  return {\n    type: TICK\n  }\n}\n\nexport const breakToSession = () => {\n  return {\n    type: BREAK_TO_SESSION\n  }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { sessionUp, sessionDown } from '../redux/actions'\nimport './SessionControls.css'\n\nclass SessionControls extends React.Component {\nconstructor(props) {\n  super(props);\n}\n\nrender() {\n  return (\n    <div id=\"sessionPad\">\n      {/* User Story #2: I can see an element with id=\"session-label\" that contains \n      a string (e.g. \"Session Length\"). */}\n      {/* User Story #6: I can see an element with a corresponding \n      id=\"session-length\", which by default displays a value of 25. */}\n      <header className=\"session-header\">\n        <h2 id=\"session-label\">\n          Work minutes:\n        </h2>\n        <h2 id=\"session-length\">\n          {this.props.sessionDurationMins}\n        </h2>\n      </header>\n    \n      {/* User Story #3: I can see two clickable elements with\n      corresponding IDs: id=\"session-decrement\" and id=\"session-increment\".\n      \n      User Story #12: When I click the element with the id of session-decrement,\n      the value within id=\"session-length\" decrements by a value of 1, and I can \n      see the updated value.\n      */}\n      <div id=\"session-decrement\" \n        value=\"session-decrement\"\n        onClick={this.props.sessionDownOne}\n        className={`btn`}\n        >\n        <h3>Work DOWN</h3>\n      </div>\n\n      {/* \n      User Story #13: When I click the element with the id of session-increment,\n      the value within id=\"session-length\" increments by a value of 1, and I can\n      see the updated value. */}\n      <div id=\"session-increment\" \n      value=\"session-increment\"\n      onClick={this.props.sessionUpOne}\n      className={`btn`}\n      >\n        <h3>Work UP</h3>\n      </div>\n    </div>\n\n  )\n}\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sessionDurationMins: state.sessionDurationMins\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    sessionUpOne: () => dispatch(sessionUp()),\n    sessionDownOne: () => dispatch(sessionDown()) \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SessionControls);","import React from 'react';\nimport {connect} from 'react-redux';\nimport { timerReset, timerStart, timerStop } from '../redux/actions';\nimport './PlayControls.css'\n\nfunction PlayControls (props) {\n\n  const startStop = () => {\n    (props.countdownRunning)\n    ? props.timerStop()\n    : props.timerStart()\n  } \n  return (\n    <div id=\"playPad\">\n      {/* User Story #9: I can see a clickable element with a corresponding\n      id=\"start_stop\". */}\n      \n      {/* User Story #18: When I first click the element with id=\"start_stop\", the\n      timer should begin running from the value currently displayed in \n      id=\"session-length\", even if the value has been incremented or decremented \n      from the original value of 25. */}\n\n      {/* User Story #20: If the timer is running and I click the element\n      with id=\"start_stop\", the countdown should pause. */}\n\n      {/* User Story #21: If the timer is paused and I click the element\n      with id=\"start_stop\", the countdown should resume running from the \n      point at which it was paused. */}      \n      <div id=\"start_stop\"\n        onClick={startStop}\n        className={`btn`}\n      > \n        <h3>\n          { (!props.countdownRunning)\n            ? `START`\n            : `STOP`\n          }\n        </h3>\n        </div>\n\n\n      {/* User Story #10: I can see a clickable element with a corresponding \n      id=\"reset\".\n\n      User Story #11: When I click the element with the id of reset, any running \n      timer should be stopped, the value within id=\"break-length\" should return \n      to 5, the value within id=\"session-length\" should return to 25, and the \n      element with id=\"time-left\" should reset to it's default state.\n      */}\n      <div id=\"reset\"\n        onClick={props.timerReset}\n        className={`btn`}\n      >\n        <h3>RESET</h3>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sessionDurationMins: state.sessionDurationMins,\n    countdownRunning: state.countdownRunning,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    timerReset: () => dispatch(timerReset()),\n    timerStart: () => dispatch(timerStart()),\n    timerStop: () => dispatch(timerStop())\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayControls);","import React, { useState, useEffect, useLayoutEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { breakToSession, timerTick } from '../redux/actions'\n\n {/* User Story #8: I can see an element with corresponding id=\"time-left\".\n    NOTE: Paused or running, the value in this field should always be displayed \n    in mm:ss format (i.e. 25:00). */}\n\n  {/* User Story #19: If the timer is running, the element with the id of time-left should display the remaining time in mm:ss format (decrementing by a value of 1 and updating the display every 1000ms). */}\n\nfunction TimerModule (props) {\n    // if countdownRunning is true, initialize an interval that fires off\n    // the timerTick action once every second\n  const [interv, setInterv] = useState(null);\n\n  useEffect( () => {\n    if (props.countdownRunning) {\n      setInterv(setInterval(() => {\n        props.timerTick();\n      }, 1000));\n    }\n    else {\n      clearInterval(interv);\n    }\n\n    return function cleanup() {\n      clearInterval(interv);\n    };\n  }, [props.countdownRunning]);\n\n \n  useLayoutEffect( () => {\n    if (props.remainingCountdown <= -1) {\n      props.breakToSession();\n    }\n  }\n  );\n\n  {/* User Story #26: When a countdown reaches zero (NOTE: timer MUST reach 00:00), a sound indicating that time is up should play. This should utilize an HTML5 audio tag and have a corresponding id=\"beep\". */}\n\n  {/* User Story #27: The audio element with id=\"beep\" must be 1 second or longer. */}\n\n  {/* User Story #28: The audio element with id of beep must stop playing and be rewound to the beginning when the element with the id of reset is clicked. */}\n\n    return null;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return ({\n    breakToSession: () => dispatch(breakToSession()),\n    timerTick: () => dispatch(timerTick()),\n  })\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    countdownRunning: state.countdownRunning,\n    remainingCountdown: state.remainingCountdown,\n    sessionToggle: state.sessionToggle\n\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimerModule)","export default __webpack_public_path__ + \"static/media/beeoowoop01.0d8a921e.mp3\";","export default __webpack_public_path__ + \"static/media/beeoowoop01.60efcc02.ogg\";","import React, {useEffect, useRef} from 'react';\nimport {connect} from 'react-redux';\nimport beepMp3 from './beeoowoop01.mp3';\nimport beepOgg from './beeoowoop01.ogg'\n\nfunction BeepO (props) {\n\n  const beepAudio = useRef(null);\n\n  // User Story #26: When a countdown reaches zero (NOTE: timer MUST reach \n  // 00:00), a sound indicating that time is up should play. This should utilize\n  //  an HTML5 audio tag and have a corresponding id=\"beep\".\n  // User Story #27: The audio element with id=\"beep\" must be 1 second or longer\n\n  useEffect(() => {\n    if (props.remainingCountdown === 0) { \n      beepAudio.current.play();\n    }\n  }, [props.remainingCountdown]\n  )\n\n  // User Story #28: The audio element with id of beep must stop playing and \n  // be rewound to the beginning when the element with id=\"reset\" is clicked.\n  useEffect(() => {\n    //the only thing that changes resetCount in state/store is the reset button,\n    //so when it changes, stop the audio element if necessary\n    beepAudio.current.pause();\n    beepAudio.current.currentTime = 0;\n  }, [props.resetCount])\n  \n\n  // Perfectly good Web Audio API solution, doesn't pass fcc test suite\n    // const [audioCont, setAudioCont] = useState(null);\n\n    // useEffect( () => {\n    //   setAudioCont(new (window.AudioContext || window.webkitAudioContext)());\n    // }, []);\n\n    // useEffect( () => {\n    // if (props.remainingCountdown === 0) {\n    //   // create oscillator(s)\n    //   let oscOne = audioCont.createOscillator();\n    //   // oscillator frequency\n    //   // \"F#3\": 185.00,\n    //   // \"Gb3\": 185.00,\n    //   // \"G3\": 196.00,\n    //   // \"G#3\": 207.65,\n    //   // \"Ab3\": 207.65,\n    //   // \"A3\": 220.00,\n    //   // \"A#3\": 233.08,s\n    //   // \"Bb3\": 233.08,\n    //   // \"B3\": 246.94,\n    //   // \"C4\": 261.63,\n    //   // \"C#4\": 277.18,\n    //   // \"Db4\": 277.18,\n    //   // \"D4\": 293.66,\n    //   oscOne.frequency.value = 277.18;\n    //   oscOne.type = \"triangle\";\n\n    //     //slide rule effect?\n    //     // https://www.npmjs.com/package/webaudiofont/v/2.0.1\n    //     // https://github.com/surikov/webaudiofont\n\n    //   // create compressor (optional)\n    //   let compyMain = audioCont.createDynamicsCompressor();\n\n    //   // create gainNode\n    //   let gainMain = audioCont.createGain();\n\n    //   // connect osc --> compressor --> gain --> destination\n    //   oscOne.connect(compyMain);\n    //   compyMain.connect(gainMain);\n    //   gainMain.connect(audioCont.destination);\n\n    //   // set duration var\n    //   let dur = 10;\n\n    //   // assign exponential gain drop && oscillator stop && clear audiocontext\n    //   gainMain.gain.exponentialRampToValueAtTime(0.0001, audioCont.currentTime + dur);\n\n    //   // .current.play() / start\n    //   oscOne.start(audioCont.currentTime);\n\n    //   // to end after duration\n    //   oscOne.stop(audioCont.currentTime + dur);\n    // }\n    // }, [props.remainingCountdown])\n\n  return (\n    <audio \n      id=\"beep\" \n      preload=\"true\"\n      ref={beepAudio}>\n      <source src={beepMp3} type=\"audio/ogg\"></source>\n      <source src={beepOgg} type=\"audio/mpeg\"></source>\n      Beep, yinz.\n    </audio>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    remainingCountdown: state.remainingCountdown,\n    resetCount: state.resetCount\n  }\n}\n\nexport default connect(mapStateToProps)(BeepO);","// import logo from './logo.svg';\nimport './App.css';\nimport CountdownDisplay from './components/CountdownDisplay';\nimport BreakControls from './components/BreakControls';\nimport SessionControls from './components/SessionControls';\nimport PlayControls from './components/PlayControls'\nimport TimerModule from './components/TimerModule';\nimport BeepO from './components/BeepO';\nimport ReactFCCtest from 'react-fcctest';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Antagonistic Timer</h1>\n        <h2>Work easy knowing something ugly is happening in this tab.</h2>\n      </header>\n      <BreakControls />\n      <SessionControls />\n      <CountdownDisplay />\n      <PlayControls />\n      <TimerModule />\n      <BeepO />\n      <ReactFCCtest />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { INCREMENT_BREAK, DECREMENT_BREAK, \n  INCREMENT_SESSION, DECREMENT_SESSION, RESET, START, STOP, TICK, BREAK_TO_SESSION } \n  from './constants';\n\n// sessionToggle determines whether the countdown type being tracked \n// is the session or the break. sessionToggle: true means the session is active\n// (but not necessarily counting down).\n\n  /* User Story #16: I should not be able to set a session or break length \n  to <= 0. */\n\n  /* User Story #17: I should not be able to set a session or break length\n    to > 60. */\n\n  /* User Story #23: When a session countdown reaches zero (NOTE: timer MUST \n  reach 00:00), a new break countdown should begin, counting down from the \n  value currently displayed in the id=\"break-length\" element. */\n\n  /* User Story #25: When a break countdown reaches zero (NOTE: timer MUST \n    reach 00:00), a new session countdown should begin, counting down from \n    the value currently displayed in the id=\"session-length\" element. */\n\n\nconst initialState = {\n  breakDurationMins: 5,\n  countdownRunning: false,\n  remainingCountdown: 1500,\n  sessionDurationMins: 25,\n  sessionToggle: true,\n  resetCount: 0\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TICK:\n      if (state.sessionToggle) {\n        return ({\n          ...state,\n          remainingCountdown: state.remainingCountdown - 1\n        });\n      } else {\n        return ({\n          ...state,\n          remainingCountdown: state.remainingCountdown - 1\n        })\n      }\n    case INCREMENT_BREAK:\n      if (state.breakDurationMins >= 60) {\n        return state;\n      } else {\n        return ({\n          ...state,\n          breakDurationMins: state.breakDurationMins + 1,\n          remainingCountdown: (!state.sessionToggle && !state.countdownRunning)\n          ? state.remainingCountdown + 60\n          : state.remainingCountdown\n          });\n      }\n    case DECREMENT_BREAK:\n      if (state.breakDurationMins <= 1) {\n        return state;\n      } else {\n        return ({\n          ...state,\n          breakDurationMins: state.breakDurationMins - 1,\n          remainingCountdown: (!state.sessionToggle && !state.countdownRunning)\n          ? state.remainingCountdown - 60\n          : state.remainingCountdown\n          });\n      }\n    case INCREMENT_SESSION:\n      if (state.sessionDurationMins >= 60) {\n        return state;\n      } else {\n        return ({\n          ...state,\n          sessionDurationMins: state.sessionDurationMins + 1,\n          remainingCountdown: (state.sessionToggle && !state.countdownRunning)\n                              ? state.remainingCountdown + 60\n                              : state.remainingCountdown\n          });\n      }\n    case DECREMENT_SESSION:\n      if (state.sessionDurationMins <= 1) {\n        return state;\n      } else {\n        return ({\n          ...state,\n          sessionDurationMins: state.sessionDurationMins - 1,\n          remainingCountdown: (state.sessionToggle && !state.countdownRunning)\n          ? state.remainingCountdown - 60\n          : state.remainingCountdown\n          });\n      }\n    case RESET:\n      return (\n        {...initialState,\n        resetCount: state.resetCount + 1 }\n      );\n    case START:\n      return ({\n        ...state,\n        countdownRunning: true,\n      });\n    case STOP:\n      return ({\n        ...state,\n        countdownRunning: false,\n      });\n    case BREAK_TO_SESSION:\n        // if state session toggle is true (currently in \"session\"),\n        // flip to false (now in \"break\") and load breakMins into countdown\n        //else state session toggle is false (currently in break), so\n        // flip to true (now in \"session\") and load sessionMins into countdown\n      return ({\n        ...state,\n        sessionToggle: !state.sessionToggle,\n        remainingCountdown: (state.sessionToggle)\n                            ? state.breakDurationMins * 60\n                            : state.sessionDurationMins * 60\n        });\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './rootReducer';\n\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}